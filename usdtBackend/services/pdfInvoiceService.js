const { jsPDF } = require('jspdf');
const html2canvas = require('html2canvas');

class PDFInvoiceService {
  constructor() {
    this.doc = null;
  }

  // Generate deposit invoice PDF
  async generateDepositInvoice(userData, transactionData) {
    try {
      const doc = new jsPDF();
      this.doc = doc;

      // Set up the document
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('SecureUSDT', 20, 30);
      
      doc.setFontSize(16);
      doc.setFont('helvetica', 'normal');
      doc.text('Deposit Confirmation Invoice', 20, 45);

      // Add invoice details
      doc.setFontSize(12);
      doc.text(`Invoice #: ${transactionData.transactionId}`, 20, 65);
      doc.text(`Date: ${new Date(transactionData.date).toLocaleDateString()}`, 20, 75);
      doc.text(`Time: ${new Date(transactionData.date).toLocaleTimeString()}`, 20, 85);

      // User information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('User Information', 20, 105);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Name: ${userData.firstName} ${userData.lastName}`, 20, 120);
      doc.text(`Email: ${userData.email}`, 20, 130);
      doc.text(`User ID: ${userData._id}`, 20, 140);

      // Transaction details
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Transaction Details', 20, 160);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Amount Deposited: ${transactionData.quantity} USDT`, 20, 175);
      doc.text(`Transaction Hash: ${transactionData.transactionId}`, 20, 185);
      doc.text(`From Address: ${transactionData.userWalletId}`, 20, 195);
      doc.text(`To Address: ${transactionData.activeWalleteId}`, 20, 205);
      doc.text(`Status: ${transactionData.status.toUpperCase()}`, 20, 215);
      doc.text(`Fee: ${transactionData.fee} USDT`, 20, 225);

      // Balance information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Account Balance', 20, 245);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Previous Balance: ${(parseFloat(userData.balance) - parseFloat(transactionData.quantity)).toFixed(2)} USDT`, 20, 260);
      doc.text(`Current Balance: ${userData.balance} USDT`, 20, 270);

      // Footer
      doc.setFontSize(10);
      doc.text('This is an automated invoice generated by SecureUSDT.', 20, 290);
      doc.text('For support, contact: support@secureusdt.com', 20, 300);
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 310);

      return doc.output('datauristring');
    } catch (error) {
      console.error('Error generating deposit invoice:', error);
      throw error;
    }
  }

  // Generate withdrawal invoice PDF
  async generateWithdrawalInvoice(userData, transactionData, withdrawalData) {
    try {
      const doc = new jsPDF();
      this.doc = doc;

      // Set up the document
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('SecureUSDT', 20, 30);
      
      doc.setFontSize(16);
      doc.setFont('helvetica', 'normal');
      doc.text('Withdrawal Confirmation Invoice', 20, 45);

      // Add invoice details
      doc.setFontSize(12);
      doc.text(`Invoice #: ${transactionData.transactionId}`, 20, 65);
      doc.text(`Date: ${new Date(transactionData.date).toLocaleDateString()}`, 20, 75);
      doc.text(`Time: ${new Date(transactionData.date).toLocaleTimeString()}`, 20, 85);

      // User information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('User Information', 20, 105);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Name: ${userData.firstName} ${userData.lastName}`, 20, 120);
      doc.text(`Email: ${userData.email}`, 20, 130);
      doc.text(`User ID: ${userData._id}`, 20, 140);

      // Withdrawal details
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Withdrawal Details', 20, 160);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Amount Withdrawn: ${transactionData.quantity} USDT`, 20, 175);
      doc.text(`Transaction Hash: ${transactionData.transactionId}`, 20, 185);
      doc.text(`Wallet Address: ${withdrawalData.walletAddress || 'N/A'}`, 20, 195);
      doc.text(`Status: ${transactionData.status.toUpperCase()}`, 20, 205);
      doc.text(`Fee: ${transactionData.fee} USDT`, 20, 215);
      doc.text(`Processing Time: ${withdrawalData.processingTime || 'N/A'}`, 20, 225);

      // Balance information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Account Balance', 20, 245);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Previous Balance: ${(parseFloat(userData.balance) + parseFloat(transactionData.quantity)).toFixed(2)} USDT`, 20, 260);
      doc.text(`Current Balance: ${userData.balance} USDT`, 20, 270);

      // Footer
      doc.setFontSize(10);
      doc.text('This is an automated invoice generated by SecureUSDT.', 20, 290);
      doc.text('For support, contact: support@secureusdt.com', 20, 300);
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 310);

      return doc.output('datauristring');
    } catch (error) {
      console.error('Error generating withdrawal invoice:', error);
      throw error;
    }
  }

  // Generate admin balance addition invoice PDF
  async generateAdminBalanceInvoice(userData, transactionData, adminData, reason) {
    try {
      const doc = new jsPDF();
      this.doc = doc;

      // Set up the document
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('SecureUSDT', 20, 30);
      
      doc.setFontSize(16);
      doc.setFont('helvetica', 'normal');
      doc.text('Balance Addition Invoice', 20, 45);

      // Add invoice details
      doc.setFontSize(12);
      doc.text(`Invoice #: ${transactionData.transactionId}`, 20, 65);
      doc.text(`Date: ${new Date(transactionData.date).toLocaleDateString()}`, 20, 75);
      doc.text(`Time: ${new Date(transactionData.date).toLocaleTimeString()}`, 20, 85);

      // User information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('User Information', 20, 105);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Name: ${userData.firstName} ${userData.lastName}`, 20, 120);
      doc.text(`Email: ${userData.email}`, 20, 130);
      doc.text(`User ID: ${userData._id}`, 20, 140);

      // Admin information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Admin Information', 20, 160);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Admin Name: ${adminData.name || 'System Admin'}`, 20, 175);
      doc.text(`Admin Email: ${adminData.email || 'admin@secureusdt.com'}`, 20, 185);

      // Transaction details
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Transaction Details', 20, 205);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Amount Added: ${transactionData.quantity} USDT`, 20, 220);
      doc.text(`Transaction Hash: ${transactionData.transactionId}`, 20, 230);
      doc.text(`Status: ${transactionData.status.toUpperCase()}`, 20, 240);
      doc.text(`Fee: ${transactionData.fee} USDT`, 20, 250);
      doc.text(`Reason: ${reason || 'Admin balance addition'}`, 20, 260);

      // Balance information
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Account Balance', 20, 280);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Previous Balance: ${(parseFloat(userData.balance) - parseFloat(transactionData.quantity)).toFixed(2)} USDT`, 20, 295);
      doc.text(`Current Balance: ${userData.balance} USDT`, 20, 305);

      // Footer
      doc.setFontSize(10);
      doc.text('This is an automated invoice generated by SecureUSDT.', 20, 320);
      doc.text('For support, contact: support@secureusdt.com', 20, 330);
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 340);

      return doc.output('datauristring');
    } catch (error) {
      console.error('Error generating admin balance invoice:', error);
      throw error;
    }
  }

  // Convert PDF to buffer for email attachment
  async pdfToBuffer(pdfDataUri) {
    try {
      // Remove data URI prefix
      const base64Data = pdfDataUri.split(',')[1];
      return Buffer.from(base64Data, 'base64');
    } catch (error) {
      console.error('Error converting PDF to buffer:', error);
      throw error;
    }
  }
}

module.exports = new PDFInvoiceService();
